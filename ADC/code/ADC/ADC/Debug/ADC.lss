
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000763  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037f  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000095  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:

#include "ADC_driver.h"

void ADC_init()
{
	DDRA=0x00; //porta is input
  7c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA|=(1<<ADEN); //enable ADC
  7e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //division factor =128
  80:	86 b1       	in	r24, 0x06	; 6
  82:	87 60       	ori	r24, 0x07	; 7
  84:	86 b9       	out	0x06, r24	; 6
  86:	08 95       	ret

00000088 <ADC_read>:
}

uint16 ADC_read (uint8 chanel) //pass ADC terminal like 2 for ADC2
{
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	00 d0       	rcall	.+0      	; 0x8e <ADC_read+0x6>
  8e:	00 d0       	rcall	.+0      	; 0x90 <ADC_read+0x8>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	volatile uint16 Ain_low;
	volatile uint16 Ain;
	
	ADMUX|=(chanel & 0b00011111); //select terminal
  94:	97 b1       	in	r25, 0x07	; 7
  96:	8f 71       	andi	r24, 0x1F	; 31
  98:	98 2b       	or	r25, r24
  9a:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA|=(1<<ADSC); //start converting
  9c:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF))); //wait for converting interrupt flag =1
  9e:	34 9b       	sbis	0x06, 4	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <ADC_read+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <ADC_read+0x1c>
  a8:	00 00       	nop
	_delay_us(10); // delay for stable
	//store value of data register in Ain
	Ain_low=(uint16)ADCL;
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
	Ain=(uint16)(ADCH<<8);
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	98 2f       	mov	r25, r24
  b8:	88 27       	eor	r24, r24
  ba:	9c 83       	std	Y+4, r25	; 0x04
  bc:	8b 83       	std	Y+3, r24	; 0x03
	Ain+=Ain_low;
  be:	29 81       	ldd	r18, Y+1	; 0x01
  c0:	3a 81       	ldd	r19, Y+2	; 0x02
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	9c 81       	ldd	r25, Y+4	; 0x04
  c6:	82 0f       	add	r24, r18
  c8:	93 1f       	adc	r25, r19
  ca:	9c 83       	std	Y+4, r25	; 0x04
  cc:	8b 83       	std	Y+3, r24	; 0x03
	return Ain;
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	9c 81       	ldd	r25, Y+4	; 0x04
	
}
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <main>:
volatile uint16 ADC_VALUE;

int main(void)
{
	
    DDRC=0xff; //portc is output
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff; //portd is output
  e4:	81 bb       	out	0x11, r24	; 17
	ADC_init();
  e6:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
	
    while (1) 
    {
		
		ADC_VALUE=ADC_read(2); //read analog from ADC2
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 44 00 	call	0x88	; 0x88 <ADC_read>
  f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		//out value of adc to c & d ports
		PORTC=ADC_VALUE;
  f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 100:	85 bb       	out	0x15, r24	; 21
		PORTD=ADC_VALUE>>8;
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10a:	92 bb       	out	0x12, r25	; 18
 10c:	ee cf       	rjmp	.-36     	; 0xea <main+0xa>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
