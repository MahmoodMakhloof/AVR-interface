
2events.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000066a  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bc  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <milli_second_timer>:
/*1 milli second timer */
void milli_second_timer()
{
	/*initialization 16_bit timer 1 */
	/*CTC mode, no prescaler and enable interrupt for compare match */
	TCCR1B|=(1<<WGM12);
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(1<<CS10);
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A);
  88:	89 b7       	in	r24, 0x39	; 57
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	89 bf       	out	0x39, r24	; 57
	/*ocr = (F_CPU/(2*prescaler*freq)-1)*/
	OCR1A=(F_CPU/(1*1*1000))-1;
  8e:	87 ee       	ldi	r24, 0xE7	; 231
  90:	93 e0       	ldi	r25, 0x03	; 3
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
  96:	08 95       	ret

00000098 <main>:

int main(void)
{
	
	/*PB0 & PB1 as o/p */
	SETBIT(DDRB,PB0);
  98:	b8 9a       	sbi	0x17, 0	; 23
	SETBIT(DDRB,PB1);
  9a:	b9 9a       	sbi	0x17, 1	; 23
	
	//led1 on
	SETBIT(PORTB,PB0);
  9c:	c0 9a       	sbi	0x18, 0	; 24
	/*global interrupt enable*/
	sei();
  9e:	78 94       	sei
	
	/*start timer*/
	milli_second_timer();
  a0:	0e 94 3e 00 	call	0x7c	; 0x7c <milli_second_timer>
	
	while (1)
	{
		//toggle led2 every 2 seconds
		TOGGLEBIT(PORTB,PB1);
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	89 27       	eor	r24, r25
  aa:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f eb       	ldi	r18, 0xBF	; 191
  ae:	37 e2       	ldi	r19, 0x27	; 39
  b0:	89 e0       	ldi	r24, 0x09	; 9
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x1a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x24>
  bc:	00 00       	nop
  be:	f3 cf       	rjmp	.-26     	; 0xa6 <main+0xe>

000000c0 <__vector_7>:
	}
}

/*interrupt service routine*/
ISR(TIMER1_COMPA_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
	millis_ctr++;
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  e0:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	a1 1d       	adc	r26, r1
  e8:	b1 1d       	adc	r27, r1
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  f6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	//after 1 sec
	if (millis_ctr>=500)
  fa:	84 3f       	cpi	r24, 0xF4	; 244
  fc:	91 40       	sbci	r25, 0x01	; 1
  fe:	a1 05       	cpc	r26, r1
 100:	b1 05       	cpc	r27, r1
 102:	60 f0       	brcs	.+24     	; 0x11c <__vector_7+0x5c>
	{
		TOGGLEBIT(PORTB,PB0); /*the event of interrupt is toggle led1 state */
 104:	98 b3       	in	r25, 0x18	; 24
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	89 27       	eor	r24, r25
 10a:	88 bb       	out	0x18, r24	; 24
		millis_ctr=0; //counter=0
 10c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 110:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 114:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 118:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
	
}
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
